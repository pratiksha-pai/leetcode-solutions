{"id":473892150,"lang":"cpp","time":"1 year, 2 months","timestamp":1617031902,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/473892150/","is_pending":"Not Pending","title":"Flip Binary Tree To Match Preorder Traversal","memory":"13.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int vix = 0;\n    vector<int> ans;\n    void dfs(TreeNode* node, vector<int>& V) {\n        if (!node || (ans.size() && ans[0] == -1)) return;\n        if (node->val != V[vix++]) ans = {-1};\n        else if (node->left && node->left->val != V[vix]) {\n            ans.push_back(node->val);\n            dfs(node->right, V);\n            dfs(node->left, V);\n        } else {\n            dfs(node->left, V);\n            dfs(node->right, V);\n        }\n    }\npublic:\n    vector<int> flipMatchVoyage(TreeNode* root, vector<int>& V) {\n        dfs(root, V);\n        return ans;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flip-binary-tree-to-match-preorder-traversal"}