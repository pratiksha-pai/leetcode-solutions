{"id":470145828,"lang":"cpp","time":"1 year, 2 months","timestamp":1616248728,"status_display":"Accepted","runtime":"204 ms","url":"/submissions/detail/470145828/","is_pending":"Not Pending","title":"Design Underground System","memory":"58.7 MB","code":"class UndergroundSystem {\n    unordered_map<int, pair<string, int> >checkIns;\n    unordered_map<string, pair<int, int> >routeTimings; \npublic:\n    UndergroundSystem() {\n        \n    }\n    \n    \n    void checkIn(int id, string stationName, int t) {\n        checkIns[id] = {stationName, t};           // store id checked in at stationName at time t\n    }\n    \n    void checkOut(int id, string stationName, int t) {\n\t    //                     startStation       -    endStation\n        string startToEnd = checkIns[id].first + '-' + stationName; \n\t\t// update route's total time and count\n        routeTimings[startToEnd] = {routeTimings[startToEnd].first + (t - checkIns[id].second), routeTimings[startToEnd].second + 1};\n        checkIns.erase(id); // erase checkin data to free up memory\n    }\n    \n    double getAverageTime(string startStation, string endStation) {\n        pair<int, int> p = routeTimings[startStation + '-' + endStation];\n\t\t// divide   total time by total cound to get average route time\n        return (double)p.first / p.second;\n    }\n};\n\n/**\n * Your UndergroundSystem object will be instantiated and called as such:\n * UndergroundSystem* obj = new UndergroundSystem();\n * obj->checkIn(id,stationName,t);\n * obj->checkOut(id,stationName,t);\n * double param_3 = obj->getAverageTime(startStation,endStation);\n */","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"design-underground-system"}