{"id":480154378,"lang":"cpp","time":"1 year, 1 month","timestamp":1618324856,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/480154378/","is_pending":"Not Pending","title":"Flatten Nested List Iterator","memory":"12.8 MB","code":"/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *   public:\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     bool isInteger() const;\n *\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\n *     // The result is undefined if this NestedInteger holds a nested list\n *     int getInteger() const;\n *\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\n *     // The result is undefined if this NestedInteger holds a single integer\n *     const vector<NestedInteger> &getList() const;\n * };\n */\n\nclass NestedIterator {\npublic:\n    stack<NestedInteger*> Start, End; \n    NestedIterator(vector<NestedInteger> &nestedList) {\n        Start.push(&nestedList.front());\n        End.push(&nestedList.back());\n    }\n    \n    int next() {\n        return Start.top()++ -> getInteger();\n    }\n    \n    bool hasNext() {\n        while(size(Start)){\n            auto top = Start.top();            \n            if(Start.top() > End.top()){ // when a list is completely traversed\n                Start.pop(), End.pop();\n                continue;\n            }                            \n            if(top -> isInteger()) break;            \n            Start.top()++;\n            if(!size(top -> getList())) continue;\n            Start.push(&top -> getList().front());  \n            End.push(&top -> getList().back());\n        }\n        return size(Start);\n    }\n};\n\n/**\n * Your NestedIterator object will be instantiated and called as such:\n * NestedIterator i(nestedList);\n * while (i.hasNext()) cout << i.next();\n */","compare_result":"1111111111111111111111111111111111111111111","title_slug":"flatten-nested-list-iterator"}