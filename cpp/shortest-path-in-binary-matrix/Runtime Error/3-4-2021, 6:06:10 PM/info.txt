{"id":463450674,"lang":"cpp","time":"1 year, 3 months","timestamp":1614861370,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/463450674/","is_pending":"Not Pending","title":"Shortest Path in Binary Matrix","memory":"N/A","code":"class Solution {\npublic:\n    // int calculateShortestPath(\n    //     vector<vector<int>>& grid, \n    //     int x_start, int x_end, \n    //     int y_start, int y_end)\n    // {\n    //     if()\n    //     return 0;\n    // }\n    int min_func(int x, int y, int z){\n        int min_val = x;\n        if(y<min_val) min_val = y;\n        if(z<min_val) min_val = z;\n        return min_val;\n    }\n    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {\n        // int x_start = 0;\n        // int y_start = 0;\n        // int x_end = y_end = grid.size();\n        int n = grid.size();\n        vector< vector<int> > count_vec(n+1, std::vector<int>(n+1, INT_MAX));\n        if(grid[0][0] == 1){\n            return -1;\n        }else count_vec[0][0] = 0;\n        \n        \n        // for(int i=0; i<n;  i++){\n        //     for(int i=0; i<n;  i++)\n            // if(!grid[0][1]) count_vec[0][i] = 0;\n            // if(!grid[1][0]) count_vec[i][0] = 0;\n        // }\n        \n        \n        for(int i=0; i<n; i++){\n            for(int j=0; j<n; j++){\n                if(!grid[i][j]){\n                    count_vec[i+1][j+1] = 1 + \n                        min_func(count_vec[i][j+1], count_vec[i+1][j], count_vec[i][j]);\n                }else{\n                    continue;\n                }\n            }\n        }\n        if(count_vec[n][n] == INT_MAX) return -1;\n        else return count_vec[n][n];\n        // int res = calculateShortestPath(grid, x_start, x_end, y_start, y_end);\n        return 0;\n    }\n};","compare_result":"1111111111111111111111110000000000000000000000000000000000000000000000000000000000000000","title_slug":"shortest-path-in-binary-matrix"}