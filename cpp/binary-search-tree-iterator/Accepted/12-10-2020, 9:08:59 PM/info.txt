{"id":429251341,"lang":"cpp","time":"1 year, 6 months","timestamp":1607614739,"status_display":"Accepted","runtime":"52 ms","url":"/submissions/detail/429251341/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"24.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass BSTIterator {\npublic:\n    // struct iter_struct {\n    //     int val;\n    //     TreeNode *next;\n    // };\n\n    queue<int> q;\n    \n    BSTIterator(TreeNode* root) {\n        stack<TreeNode *> s; \n        TreeNode *curr = root; \n\n        while (curr != NULL || s.empty() == false) { \n            while (curr !=  NULL) { \n                s.push(curr); \n                curr = curr->left; \n            } \n            curr = s.top(); \n            s.pop(); \n\n            cout << curr->val << \" \"; \n            q.push(curr->val);\n            curr = curr->right; \n        }\n    }\n    \n    int next() {\n        if(!q.empty()) {\n            int temp = q.front();\n            q.pop();\n            return temp;\n        }\n        return 0;\n\n    }\n    \n    bool hasNext() {\n        return !q.empty();\n    }\n\n};\n\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator* obj = new BSTIterator(root);\n * int param_1 = obj->next();\n * bool param_2 = obj->hasNext();\n */","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-search-tree-iterator"}