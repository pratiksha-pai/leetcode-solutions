{"id":470540885,"lang":"cpp","time":"1 year, 2 months","timestamp":1616323303,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/470540885/","is_pending":"Not Pending","title":"Reordered Power of 2","memory":"6.1 MB","code":"class Solution {\npublic:\n    // counts frequency of each digit in given number N and returns it as vector\n    vector<int> countDigits(int N){\n        vector<int>digitsInN(10);\n        while(N)\n            digitsInN[N % 10]++, N /= 10;\n        return digitsInN;\n    }\n    bool reorderedPowerOf2(int N) {\n        vector<int> digitsInN = countDigits(N); // freq of digits in N\n        // powOf2 goes from 2^0 to 2^30 and each time freq of digits in powOf2 is compared with digitsInN\n        for(int i = 0, powOf2 = 1; i <= 30; i++, powOf2 <<= 1)\n            if(digitsInN == countDigits(1 << i)) return true;  // return true if both have same frequency of each digits\n        return false;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"reordered-power-of-2"}