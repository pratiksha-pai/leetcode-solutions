{"id":487435234,"lang":"cpp","time":"1 year, 1 month","timestamp":1619879942,"status_display":"Accepted","runtime":"888 ms","url":"/submissions/detail/487435234/","is_pending":"Not Pending","title":"Prefix and Suffix Search","memory":"140.9 MB","code":"class WordFilter {\npublic:\n    std::unordered_map <std::string, int> dict;\n    WordFilter(vector<string>& words) {\n        int index = 0;\n        for (std::string word: words) {\n            int l = word.length();\n            std::vector < std::string > prefix(l + 1, \"\");\n            std::vector < std::string > suffix(l + 1, \"\");\n            for (int i = 1; i <= l; i++) {\n                prefix[i] = prefix[i - 1] + word[i - 1];\n                suffix[i] = word[l - i] + suffix[i - 1];\n            }\n            for (int i = 0; i <= l; i++)\n                for (int j = 0; j <= l; j++) \n\t\t\t\t{\n                    std::string key = prefix[i] + '_' + suffix[j];\n                    dict[key] = index;\n                }\n            index+=1;\n        }\n    }\n    \n    int f(string prefix, string suffix) {\n        {\n            std::string key = prefix + \"_\" + suffix;\n            auto it = dict.find(key);\n            if (it != dict.end()) return it -> second;\n            return -1;\n        }  \n    }\n};\n\n/**\n * Your WordFilter object will be instantiated and called as such:\n * WordFilter* obj = new WordFilter(words);\n * int param_1 = obj->f(prefix,suffix);\n */","compare_result":"111111111","title_slug":"prefix-and-suffix-search"}