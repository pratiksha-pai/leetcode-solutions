{"id":472490215,"lang":"cpp","time":"1 year, 2 months","timestamp":1616722115,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/472490215/","is_pending":"Not Pending","title":"Pacific Atlantic Water Flow","memory":"23.9 MB","code":"class Solution {\npublic:\n    int m, n;\n\t// denotes cells reachable starting from atlantic and pacific edged cells respectively\n    vector<vector<bool> > atlantic, pacific;\n\tvector<vector<int> > ans;    \n    vector<vector<int> > pacificAtlantic(vector<vector<int>>& mat) {\n        if(!size(mat)) return ans;\n        m = size(mat), n = size(mat[0]);\n        atlantic = pacific = vector<vector<bool> >(m, vector<bool>(n, false));\n\t\t// perform dfs from all edge cells (ocean-connected cells)\n        for(int i = 0; i < m; i++) dfs(mat, pacific, i, 0), dfs(mat, atlantic, i, n - 1);\n        for(int i = 0; i < n; i++) dfs(mat, pacific, 0, i), dfs(mat, atlantic, m - 1, i);             \n        return ans;\n    }\n    void dfs(vector<vector<int> >& mat, vector<vector<bool> >& visited, int i, int j){        \n        if(visited[i][j]) return;\n        visited[i][j] = true;\n\t\t// if cell reachable from both the oceans, insert into final answer vector\n        if(atlantic[i][j] && pacific[i][j]) ans.push_back(vector<int>{i, j});    \n\t\t// dfs from current cell only if height of next cell is greater\n/*⬇️*/  if(i + 1 <  m && mat[i + 1][j] >= mat[i][j]) dfs(mat, visited, i + 1, j); \n/*⬆️*/  if(i - 1 >= 0 && mat[i - 1][j] >= mat[i][j]) dfs(mat, visited, i - 1, j);\n/*➡️*/  if(j + 1 <  n && mat[i][j + 1] >= mat[i][j]) dfs(mat, visited, i, j + 1); \n/*⬅️*/  if(j - 1 >= 0 && mat[i][j - 1] >= mat[i][j]) dfs(mat, visited, i, j - 1);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"pacific-atlantic-water-flow"}