{"id":493999645,"lang":"cpp","time":"1Â year","timestamp":1621176480,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/493999645/","is_pending":"Not Pending","title":"Binary Tree Cameras","memory":"21.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int camera=0;\n    \n    int solve(TreeNode *root)\n    {\n        if(!root)\n            return 1;\n        int lc=solve(root->left);\n        int rc=solve(root->right);\n        if(lc==-1 or rc==-1)\n        {\n            camera++;\n            return 0;\n        }\n        if(lc==0 or rc==0)\n            return 1;\n        return -1;\n    }\n    \n    int minCameraCover(TreeNode* root) {\n        camera=0;\n        if(solve(root)==-1)\n            camera++;\n        return camera;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-cameras"}