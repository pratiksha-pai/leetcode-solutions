{"id":476356867,"lang":"cpp","time":"1 year, 2 months","timestamp":1617542642,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/476356867/","is_pending":"Not Pending","title":"Design Circular Queue","memory":"16.7 MB","code":"class MyCircularQueue {\npublic:\n    int max_size;\n    queue<int> q;\n    MyCircularQueue(int k) {\n        max_size = k;\n    }\n    \n    bool enQueue(int value) {\n        if(q.size() >= max_size) return false;\n        q.push(value);\n        return true;\n    }\n    \n    bool deQueue() {\n        if(q.size() == 0) return false;\n        q.pop();\n        return true;\n    }\n    \n    int Front() {\n        if(q.size() == 0 ) return -1;\n        else return q.front();\n    }\n    \n    int Rear() {\n        if(q.size() == 0 ) return -1;\n        else return q.back();\n    }\n    \n    bool isEmpty() {\n        if(q.size() == 0) return true;\n        return false;\n    }\n    \n    bool isFull() {\n        if(q.size() == max_size) return true;\n        return false;\n    }\n};\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * MyCircularQueue* obj = new MyCircularQueue(k);\n * bool param_1 = obj->enQueue(value);\n * bool param_2 = obj->deQueue();\n * int param_3 = obj->Front();\n * int param_4 = obj->Rear();\n * bool param_5 = obj->isEmpty();\n * bool param_6 = obj->isFull();\n */","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"design-circular-queue"}