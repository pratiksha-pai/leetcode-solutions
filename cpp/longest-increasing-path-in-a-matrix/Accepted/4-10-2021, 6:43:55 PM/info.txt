{"id":478865590,"lang":"cpp","time":"1 year, 1 month","timestamp":1618060435,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/478865590/","is_pending":"Not Pending","title":"Longest Increasing Path in a Matrix","memory":"14.7 MB","code":"class Solution {\npublic:\n    int dp[200][200];// constraints are small enough that we can just set them to MAX\n    int cnt, n, m;\n    int longestIncreasingPath(vector<vector<int>>& matrix) {\n        cnt = 0, n = size(matrix), m = size(matrix[0]);\n        for(int i = 0; i < n; i++)\n            for(int j = 0; j < m; j++)\n                cnt = max(cnt, solve(matrix, i, j, -1));            \n        return cnt;\n    }\n    int solve(vector<vector<int>>& mat, int i, int j, int prev){\n        if(i < 0 || j < 0 || i >= n || j >= m || mat[i][j] <= prev) return 0;\n        if(dp[i][j]) return dp[i][j];\n        return dp[i][j] = 1 + max({ solve(mat, i + 1, j, mat[i][j]),\n                                    solve(mat, i - 1, j, mat[i][j]),\n                                    solve(mat, i, j + 1, mat[i][j]),\n                                    solve(mat, i, j - 1, mat[i][j]) });       \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-path-in-a-matrix"}