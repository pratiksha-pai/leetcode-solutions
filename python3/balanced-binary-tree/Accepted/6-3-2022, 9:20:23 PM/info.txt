{"id":713619554,"lang":"python3","time":"5 days, 17 hours","timestamp":1654271423,"status_display":"Accepted","runtime":"139 ms","url":"/submissions/detail/713619554/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"18.8 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def height(self, root: Optional[TreeNode]) -> int:\n        h_left = 0\n        h_right = 0\n        h = 0\n        \n        if root == None:\n            return 0\n        elif root.left == None and root.right == None:\n            return 1\n        \n        if root.left != None:\n            h_left = self.height(root.left)\n        if root.right != None:\n            h_right = self.height(root.right)\n        \n        if h_left > h_right:\n            h = 1 + h_left\n        else:\n            h = 1 + h_right\n        \n        return h\n    \n    def isBalanced(self, root: Optional[TreeNode]) -> bool:\n        if root == None:\n            return True\n        elif root.left == None and root.right == None:\n            return True\n        else:\n            pass\n        \n        h_left = self.height(root.left)\n        h_right = self.height(root.right)\n        if abs(h_left-h_right)>1:\n            return False\n        \n        if root.left != None and self.isBalanced(root.left) == False:\n            return False\n        \n        if root.right != None and self.isBalanced(root.right) == False:\n            return False\n        \n        \n        \n        return True\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"balanced-binary-tree"}