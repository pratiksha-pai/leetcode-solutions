{"id":714299503,"lang":"python3","time":"4 days, 17 hours","timestamp":1654360021,"status_display":"Accepted","runtime":"832 ms","url":"/submissions/detail/714299503/","is_pending":"Not Pending","title":"Diameter of Binary Tree","memory":"16.4 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    \n    def getMax(self, a, b) -> int:\n        if a>b:\n            return a\n        return b\n    \n    def height(self, root: Optional[TreeNode]) -> int:\n        if root == None:\n            return 0\n        return self.getMax(self.height(root.left), self.height(root.right)) + 1\n    \n    def diameterOfBinaryTreeUtil(self, root: Optional[TreeNode], h) -> int:\n        \n        if root == None:\n            return h\n\n        height_max = self.height(root.left) + self.height(root.right)\n        height_left = self.diameterOfBinaryTreeUtil(root.left, 0)\n        height_right = self.diameterOfBinaryTreeUtil(root.right, 0)\n        \n        # print('heightssss')\n        # print(height_max, height_left, height_right)\n        \n        height1 = self.getMax(height_left, height_right)\n        height2 = self.getMax(height_max, h)\n        height_max = self.getMax(height1, height2)\n        \n        return height_max\n    \n    def diameterOfBinaryTree(self, root: Optional[TreeNode]) -> int:\n        if root == None:\n            return 0\n        \n        if root.left == None and root.right == None:\n            return 0\n        \n        return self.diameterOfBinaryTreeUtil(root, 0)\n    \n    \n    \n#     def distanceToLeftLeaf(self, root) -> int:\n#         h = 0\n#         if root == None :\n#             return 0\n#         if root.left == None:\n#             return 0\n        \n#         while root.left != None:\n#             h += 1 \n#             root = root.left\n#         # print('from distanceToLeftLeaf - '+str(h))    \n#         return h\n    \n#     def distanceToRightLeaf(self, root) -> int:\n#         h = 0\n#         if root == None :\n#             return 0\n#         if root.right == None:\n#             return 0\n        \n#         while root.right != None:\n#             h += 1 \n#             root = root.right\n        \n#         # print('from distanceToRightLeaf - '+str(h))\n#         return h\n    \n#     def getDiamter(self, root: Optional[TreeNode], d):\n#         if root == None:\n#             return 0\n#         # if root.left == None and root.right == None:\n#         #     return d\n        \n#         return 1 + getDiamter(root.left, d) + getDiamter(root.right, d)\n    \n    \n#     def diameterOfBinaryTree(self, root: Optional[TreeNode]) -> int:\n        \n#         if root == None:\n#             return 0\n#         if root.left == None and root.right == None:\n#             return 0\n        \n#         return getDiamter(root, 0)\n        \n        \n#         # d_left = self.diameterOfBinaryTree(root.left)\n#         # d_right = self.diameterOfBinaryTree(root.right)\n        \n        \n#         # print(self.distanceToLeftLeaf(root))\n#         # print(self.distanceToRightLeaf(root))\n#         # print(self.diameterOfBinaryTree(root.left))\n#         # print(self.diameterOfBinaryTree(root.right))\n#         # print('-----------------------------')\n        \n        \n#         # d_max = d\n#         # if (d_max < d_left):\n#         #     d_max = d_left\n#         # if (d_max < d_right):\n#         #     d_max = d_right\n        \n#         return d\n        \n        \n        \n        \n        \n        ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"diameter-of-binary-tree"}