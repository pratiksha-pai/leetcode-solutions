{"id":714069376,"lang":"python3","time":"5 days, 1 hour","timestamp":1654331530,"status_display":"Accepted","runtime":"44 ms","url":"/submissions/detail/714069376/","is_pending":"Not Pending","title":"Maximum Depth of Binary Tree","memory":"15.3 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxDepth(self, root: Optional[TreeNode]) -> int:\n        if root == None:\n            return 0\n        if root.left == None and root.right == None:\n            return 1\n        \n        s1 = []\n        s2 = []\n        \n        h = 0\n        s1.append(root)\n        \n        while(len(s1) != 0 or len(s2) != 0):\n            if len(s1)!=0:\n                h += 1\n            while len(s1) != 0 :\n                temp = s1[0]\n                \n                if temp.left != None:\n                    s2.append(temp.left)\n                if temp.right != None:\n                    s2.append(temp.right)\n                \n                del s1[0]\n            \n            if len(s2)!=0:\n                h += 1\n\n            while len(s2) != 0 :\n                temp = s2[0]\n                \n                if temp.left != None:\n                    s1.append(temp.left)\n                if temp.right != None:\n                    s1.append(temp.right)\n                \n                del s2[0]\n            \n            \n        return h\n                \n\n\n            ","compare_result":"111111111111111111111111111111111111111","title_slug":"maximum-depth-of-binary-tree"}