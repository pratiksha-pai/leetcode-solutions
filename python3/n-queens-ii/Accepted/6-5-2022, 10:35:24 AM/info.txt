{"id":714716480,"lang":"python3","time":"4 days, 4 hours","timestamp":1654405524,"status_display":"Accepted","runtime":"149 ms","url":"/submissions/detail/714716480/","is_pending":"Not Pending","title":"N-Queens II","memory":"14 MB","code":"class Solution:\n    def totalNQueens(self, n: int) -> int:\n        \n        # prohibited cells if we have the queen on (i, j)\n        # (i, j)  --> (i+1, j+1) --> (i+2, j+2) --> ...\n        # (i, j)  --> (i+1, j-1) --> (i+2, j-2) --> ...\n        \n        \n        # cur - current row\n        # path - current placement within this path\n        # prev - all prev queen places\n        # ans - all configurations list\n        \n\t\t# check if (cur, col) cell is availible considering all queens above\n        def check(col, cur, prev):\n            if not prev: return True\n            for i, j in prev:\n                if col == j: return False\n                if cur - i == abs(col - j): return False\n            return True\n        \n        def dfs(cur, prev, path):\n            \n            if cur == n:\n                ans.append(path)\n                return\n            \n            for col in range(n):\n                if check(col, cur, prev):\n                    new_line = '.'*col + 'Q' + '.'*(n-col-1)\n                    dfs(cur + 1, prev + [(cur, col)], path + [new_line])\n        \n        ans = []\n        dfs(0, [], [])\n        \n        \n        return len(ans)","compare_result":"111111111","title_slug":"n-queens-ii"}