{"id":672407250,"lang":"python3","time":"2 months, 1 week","timestamp":1648922876,"status_display":"Accepted","runtime":"174 ms","url":"/submissions/detail/672407250/","is_pending":"Not Pending","title":"Valid Palindrome II","memory":"14.6 MB","code":"class Solution:\n    \n    def isPalindrome(self, s: str) -> bool:\n        return s == s[::-1]\n    \n    def validPalindrome(self, s: str) -> bool:\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        def validPalindrome(s, left, right):\n            while left < right:\n                if s[left] != s[right]:\n                    return False\n                left, right = left+1, right-1\n            return True\n        \n        left, right = 0, len(s)-1\n        while left < right:\n            if s[left] != s[right]:\n                return validPalindrome(s, left, right-1) or validPalindrome(s, left+1, right)\n            left, right = left+1, right-1\n        return True\n#         flag = False\n#         if self.isPalindrome(s):\n#             return True\n#         n = len(s)\n#         low = 0 \n#         high = n-1\n        \n#         while low < high:\n#             if s[low] == s[high]:\n#                 low = low+1\n#                 high = high-1\n#             else:\n#                 if self.isPalindrome(s[low+1:high]):\n#                     return True\n#                 if self.isPalindrome(s[low:high-1]):\n#                     return True\n#                 return False\n#         return True","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-palindrome-ii"}