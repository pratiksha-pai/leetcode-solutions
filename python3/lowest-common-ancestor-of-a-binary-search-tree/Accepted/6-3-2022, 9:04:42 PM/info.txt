{"id":713610599,"lang":"python3","time":"5 days, 18 hours","timestamp":1654270482,"status_display":"Accepted","runtime":"81 ms","url":"/submissions/detail/713610599/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"18.9 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        if root == None:\n            return None\n        \n        if p.val<q.val:\n            temp1=p.val\n            temp2=q.val\n        else:\n            temp1=q.val\n            temp2=p.val\n        \n        \n        \n        if root.val < temp2 and root.val > temp1 or root.val == p.val or root.val == q.val:\n            return root\n        elif root.val < q.val and root.val < p.val:\n            return self.lowestCommonAncestor(root.right, p, q)\n        elif root.val > q.val and root.val > p.val:\n            return self.lowestCommonAncestor(root.left, p, q)\n        \n        return None\n        \n        ","compare_result":"111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree"}